{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/commands-list/commands-list.component.ts","./src/app/components/commands-list/commands-list.component.html","./src/app/components/menu/menu.component.ts","./src/app/components/menu/menu.component.html","./src/app/pages/drawings/drawings.component.ts","./src/app/pages/drawings/drawings.component.html","./src/app/pages/login/login.component.ts","./src/app/pages/login/login.component.html","./src/app/pages/main/main.component.ts","./src/app/pages/main/main.component.html","./src/app/pages/main/dialog-mic-selection.html","./src/app/pages/register/register.component.ts","./src/app/pages/register/register.component.html","./src/app/pages/soundboard/soundboard.component.ts","./src/app/pages/soundboard/soundboard.component.html","./src/app/services/http.service.ts","./src/app/services/socket.service.ts","./src/app/services/toast.service.ts","./src/environments/environment.ts","./src/main.ts","ws (ignored)"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MainComponent } from 'src/app/pages/main/main.component';\nimport { SoundboardComponent } from './pages/soundboard/soundboard.component';\nimport { DrawingsComponent } from './pages/drawings/drawings.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { RegisterComponent } from './pages/register/register.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full'},\n  { path: 'dashboard', component: MainComponent},\n  { path: 'soundboard', component: SoundboardComponent},\n  { path: 'drawings', component: DrawingsComponent},\n  { path: 'login', component: LoginComponent},\n  { path: 'register', component: RegisterComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'dashboard';\n}\n","<app-menu></app-menu>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MenuComponent } from './components/menu/menu.component';\nimport { MainComponent, DialogMicSelection } from './pages/main/main.component';\nimport { FormsModule } from '@angular/forms';\n\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatListModule} from '@angular/material/list';\nimport { SoundboardComponent } from './pages/soundboard/soundboard.component';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatInputModule} from '@angular/material/input';\nimport { CommandsListComponent } from './components/commands-list/commands-list.component';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatDividerModule} from '@angular/material/divider';\nimport { DrawingsComponent } from './pages/drawings/drawings.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { RegisterComponent } from './pages/register/register.component';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatDialogModule} from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MenuComponent,\n    MainComponent,\n    SoundboardComponent,\n    CommandsListComponent,\n    DrawingsComponent,\n    LoginComponent,\n    RegisterComponent,\n    DialogMicSelection\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    FormsModule,\n\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatListModule,\n    MatCardModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatGridListModule,\n    MatDividerModule,\n    MatProgressSpinnerModule,\n    MatSnackBarModule,\n    MatDialogModule\n  ],\n  entryComponents: [\n    DialogMicSelection,\n    MainComponent\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from 'src/app/services/http.service';\nimport { Command } from 'src/app/models/Command';\n\n@Component({\n  selector: 'app-commands-list',\n  templateUrl: './commands-list.component.html',\n  styleUrls: ['./commands-list.component.scss']\n})\nexport class CommandsListComponent implements OnInit {\n\n  commands: Command[];\n\n  constructor(\n    private httpService: HttpService\n  ) { }\n\n  ngOnInit(): void {\n    this.httpService.get('commands').toPromise().then(commands => {\n      commands.forEach(cmd => cmd.activated = true);\n      this.commands = commands;\n    });\n  }\n\n  selectedCommands() {\n    return this.commands.filter(command => command.activated === true);\n  }\n\n}\n","<mat-selection-list>\n    <mat-list-option checkboxPosition=\"before\" *ngFor=\"let command of commands\" [selected]=\"command.activated\" (click)=\"command.activated = !command.activated\">\n            <span><label class=\"command-checkbox-label\">!{{command.name}}</label> : {{command.description}}</span>\n    </mat-list-option>\n</mat-selection-list>","import { Component, OnInit } from '@angular/core';\nimport { SocketService } from 'src/app/services/socket.service';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss']\n})\nexport class MenuComponent implements OnInit {\n\n  opened = true;\n\n  constructor(\n    public socketService: SocketService\n  ) { }\n\n  ngOnInit(): void {\n\n  }\n\n}\n","\n<mat-toolbar color=\"primary\">\n  <button mat-icon-button (click)=\"opened = !opened\">\n    <mat-icon>menu</mat-icon>\n    </button> BOT Blackboard Collab\n</mat-toolbar>\n\n<mat-sidenav-container  class=\"main-container\" autosize>\n  <mat-sidenav class=\"main-sidenav\" [opened]=\"opened\" fixedInViewport=\"false\" mode=\"side\">\n              <mat-list role=\"list\">\n\n                <mat-list-item role=\"listitem\">\n                  <button routerLink=\"/dashboard\" class=\"sidenav-button\" mat-button>\n                    Page de contrôle\n                  </button> \n                </mat-list-item>\n\n                <mat-list-item role=\"listitem\"> \n                  <button routerLink=\"/soundboard\" class=\"sidenav-button\" mat-button>\n                    Soundboard\n                  </button> \n                </mat-list-item>\n\n                <mat-list-item role=\"listitem\">\n                  <button routerLink=\"/drawings\" class=\"sidenav-button\" mat-button>\n                    Dessins\n                  </button> \n                </mat-list-item>\n\n                <!--<mat-list-item role=\"listitem\">\n                  <button class=\"sidenav-button\" mat-button>\n                    Services\n                  </button> \n                </mat-list-item>-->\n\n              </mat-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <router-outlet *ngIf=\"socketService.alive\"></router-outlet>\n\n    <div *ngIf=\"!socketService.alive\" id=\"error-socket-div\">\n      <div>ERREUR DE CONNEXION AU SERVEUR</div>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","import { Component, OnInit } from '@angular/core';\nimport { Drawing } from 'src/app/models/Drawing';\nimport { HttpService } from 'src/app/services/http.service';\nimport { ToastService } from 'src/app/services/toast.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-drawings',\n  templateUrl: './drawings.component.html',\n  styleUrls: ['./drawings.component.scss']\n})\nexport class DrawingsComponent implements OnInit {\n\n  drawings: Drawing[];\n  cols = 0;\n\n  constructor(\n    private httpService: HttpService,\n    private toastService: ToastService\n  ) { }\n\n  ngOnInit(): void {\n    this.httpService.get('drawings').toPromise().then(drawings => {\n      this.drawings = drawings;\n      this.cols = Math.round(Math.sqrt(this.drawings.length));\n    });\n  }\n\n  async draw(name) {\n    const drawingRes = await this.httpService.post('draw', {name}).toPromise();\n\n    if (!drawingRes) {\n      this.toastService.showToast('Erreur, le BOT ne peut pas dessiner. Le dessin n\\'est pas activé sur la page', 6000);\n    }\n  }\n\n  getUrl(name) {\n    return environment.apiUrl + `/static/drawings/svg/${name}.svg`;\n  }\n}\n","<div id=\"drawings-grid-div\">\n    <mat-grid-list id=\"drawings-grid-list\" [cols]=\"cols\" rowHeight=\"3:1\">\n        <mat-grid-tile *ngFor=\"let drawing of drawings\">\n\n            <button mat-raised-button color=\"accent\" class=\"drawing-card-button\" (click)=\"draw(drawing.name)\">\n                <span class=\"drawing-card-spann\">\n                    {{drawing.name}}\n                </span>\n                <img mat-card-image class=\"drawing-svg\" [src]=\"getUrl(drawing.name)\" alt=\"Screenshot of the bot\">  \n            </button>\n\n\n        </mat-grid-tile>\n    </mat-grid-list>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>login works!</p>\n","import { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { CommandsListComponent } from 'src/app/components/commands-list/commands-list.component';\nimport { HttpService } from 'src/app/services/http.service';\nimport { SocketService } from 'src/app/services/socket.service';\nimport { Observable } from 'rxjs';\nimport { Bot } from 'src/app/models/Bot';\nimport { ToastService } from 'src/app/services/toast.service';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n\n  @ViewChild('commands')\n  commands: CommandsListComponent;\n\n  botStatusSocket: Observable<any>;\n  currentBot: Bot;\n\n  loading = false;\n  connected = false;\n  connectionMessage: string;\n\n  botTextarea: string;\n  screenshotUrl: string;\n\n  botNameInput: string;\n  botUrlInput: string;\n\n  constructor(\n    private httpService: HttpService,\n    private socketService: SocketService,\n    private toastService: ToastService,\n    public dialog: MatDialog\n  ) { }\n\n  ngOnInit(): void {\n    this.socketService.setup();\n\n    this.httpService.get('bot').toPromise().then(bot => {\n      if (bot) {\n        this.currentBot = bot;\n        this.connected = this.currentBot.connected;\n        this.screenshot();\n      }\n    });\n\n    if (!this.botStatusSocket) {\n      this.botStatusSocket = this.socketService.subscribe('bot-status');\n      this.botStatusSocket.subscribe(info => {\n        this.socketCases(info);\n      });\n    }\n  }\n\n  async startBot() {\n\n    if (!this.botNameInput || !(this.botUrlInput.includes('bbcollab.com') || this.botUrlInput.includes('blackboard'))) {\n      this.toastService.showToast('Veuillez remplir les champs correctement avant!', 5000);\n    } else {\n\n      this.currentBot = {\n        name: this.botNameInput,\n        url: this.botUrlInput,\n        commands: this.commands.selectedCommands(),\n        connected: true\n      };\n\n      this.loading = true;\n      const started = await this.httpService.post('start', this.currentBot).toPromise();\n\n      if (!started) {\n        this.loading = false;\n        this.currentBot = null;\n        this.toastService.showToast('Erreur lors de la connexion avec le BOT', 6000);\n      }\n    }\n  }\n\n  async disconnectBot() {\n    await this.httpService.get('disconnect').toPromise().then(res => console.log(res));\n    this.currentBot = null;\n  }\n\n  async sendText() {\n    const res = await this.httpService.post('text', {\n      message: this.botTextarea\n    }).toPromise();\n\n    if (res) {\n      this.toastService.showToast('Le message a bien été envoyé !', 5000);\n    } else {\n      this.toastService.showToast('Le BOT ne peut pas accéder au chat', 6000);\n    }\n  }\n\n  async sendVoice() {\n    const res = await this.httpService.post('speak', {\n      message: this.botTextarea,\n      username: this.currentBot.name\n    }).toPromise();\n\n    if (res) {\n      this.toastService.showToast('Le message a bien été envoyé !', 5000);\n    }\n  }\n\n  async screenshot() {\n    const url = environment.apiUrl + '/static/screenshot/screenshot.png';\n    const timeStamp = new Date().getTime();\n    await this.httpService.get('screenshot').toPromise();\n    this.screenshotUrl = url + '?' + timeStamp;\n  }\n\n  async clickPage(event) {\n    const boundingBox = document.getElementById('bot-screenshot-img').getBoundingClientRect();\n    const xPos = event.x - boundingBox.x;\n    const yPos = event.y - boundingBox.y;\n    const xRatio = xPos / boundingBox.width;\n    const yRatio = (yPos / boundingBox.height) * 0.55;\n    console.log('click');\n    await this.httpService.post('click', {x: xRatio, y: yRatio}).toPromise();\n    this.screenshot();\n  }\n\n  onKeydown(event) {\n    if (event.key === 'Enter') {\n      this.startBot();\n    }\n  }\n\n  socketCases(info) {\n    switch (info.message) {\n      case 'connecting':\n        this.loading = false;\n        this.connected = false;\n        this.screenshot();\n        this.connectionMessage = 'Connexion en cours';\n        break;\n\n      case 'live':\n        this.loading = false;\n        this.connected = true;\n        break;\n\n      case 'wrong-url':\n        this.currentBot = null;\n        this.toastService.showToast('L\\'URL n\\'est pas bonne !', 6000);\n        break;\n\n      case 'error':\n        break;\n\n      case 'skipping-test':\n        this.loading = false;\n        this.connected = false;\n        this.screenshot();\n        this.connectionMessage = 'Le bot passe la page de test';\n        break;\n\n      case 'bot-infos':\n        this.currentBot = info;\n        this.screenshot();\n        break;\n\n      case 'setup-mic':\n        this.loading = false;\n        this.connected = false;\n        this.screenshot();\n        this.connectionMessage = 'Le bot accède au micro';\n        break;\n\n      case 'setup-mic-error':\n        this.screenshot();\n        this.openMicDialog(info.content);\n        break;\n\n      case 'mic-selection':\n        this.connectionMessage = 'Le bot doit choisir une source micro';\n        this.screenshot();\n        break;\n\n      case 'video-setup-done':\n        this.connectionMessage = 'Le bot passe l\\'accès à la caméra';\n        this.screenshot();\n        break;\n\n      case 'mic-selection-done':\n        this.connectionMessage = 'Le bot a choisi la source micro';\n        this.screenshot();\n        break;\n\n      case 'chat-not-available':\n        this.toastService.showToast('Le BOT ne peut pas accéder au chat', 6000);\n        this.screenshot();\n        break;\n\n      case 'setup-mic-done':\n        this.loading = false;\n        this.connected = false;\n        this.screenshot();\n        this.connectionMessage = 'Micro mis en place';\n        break;\n    }\n  }\n\n  async openMicDialog(audioDevices) {\n    const dialogRef = this.dialog.open(DialogMicSelection, {\n      width: 'fit-content',\n      data: audioDevices\n    });\n\n    dialogRef.afterClosed().subscribe(async (result) => {\n      console.log('selected index', result);\n\n      if (result != null) {\n        this.httpService.post('mic-option', {index: result}).toPromise().then(res => console.log(res));\n        this.dialog.closeAll();\n      }\n\n    });\n  }\n}\n\n\n@Component({\n  selector: 'dialog-mic-selection',\n  templateUrl: 'dialog-mic-selection.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class DialogMicSelection {\n\n  constructor(\n    public dialogRef: MatDialogRef<DialogMicSelection>,\n    @Inject(MAT_DIALOG_DATA) public data) {}\n\n  onNoClick(res): void {\n    this.dialogRef.close(res);\n  }\n}","\n<div id=\"main-div\">\n    <mat-card class=\"start-bot-card\" *ngIf=\"!currentBot && !loading\">\n        <mat-card-header>\n          <mat-card-title>Lancer un nouveau BOT</mat-card-title>\n        </mat-card-header>\n\n        <mat-card-content>\n            <form>\n                <mat-form-field>\n                  <mat-label>Nom du BOT</mat-label>\n                  <input matInput (keydown)=\"onKeydown($event)\" [(ngModel)]=\"botNameInput\" [ngModelOptions]=\"{standalone: true}\" placeholder=\"Joe\">\n                </mat-form-field>\n            </form>\n\n            <form>\n              <mat-form-field>\n                <mat-label>URL de la classe</mat-label>\n                <input matInput (keydown)=\"onKeydown($event)\" [(ngModel)]=\"botUrlInput\" [ngModelOptions]=\"{standalone: true}\" placeholder=\"https://eu.bbcollab.com/guest/...\">\n              </mat-form-field>\n            </form>\n\n            <app-commands-list #commands></app-commands-list>\n\n        </mat-card-content>\n\n        <mat-divider></mat-divider>\n\n        <button id=\"start-button\" (click)=\"startBot()\" mat-raised-button color=\"primary\">Lancer !</button>\n\n    </mat-card>\n\n    <mat-card *ngIf=\"currentBot && !loading\" class=\"statut-bot-card\">\n      <mat-card-header>\n        <button id=\"disconnect-button\" (click)=\"disconnectBot()\" mat-raised-button color=\"primary\">\n         <mat-icon>input</mat-icon> Déconnecter\n        </button>\n        <mat-card-title>\n          <div class=\"statut-title-div\">\n            Status du BOT <span>{{currentBot.name}}</span>\n          </div>\n\n        </mat-card-title>\n      </mat-card-header>\n\n      <mat-card-content>\n        <mat-card class=\"statut-connection-card\">\n          <div class=\"statut-url-div\">\n            <span>{{currentBot.url}}</span>\n          </div>\n          <div *ngIf=\"!connected\" class=\"statut-div\">\n            <mat-spinner diameter=\"20\"></mat-spinner>\n            {{connectionMessage}}\n            <mat-icon class=\"not-connected-icon\">signal_wifi_off</mat-icon>\n          </div>\n          \n          <div *ngIf=\"connected\" class=\"statut-div\">\n            Connecté\n            <mat-icon class=\"connected-icon\">signal_wifi_4_bar</mat-icon>\n          </div>\n        </mat-card>\n      \n        <mat-card class=\"bot-speak-card\">        \n          <mat-form-field class=\"bot-speak-formfield\">\n            <mat-label>Faire parler le BOT</mat-label>\n            <textarea matInput [(ngModel)]=\"botTextarea\" class=\"bot-speak-textarea\" placeholder=\"Ex. Je vais détruire le monde...\"></textarea>\n          </mat-form-field>\n\n          <div class=\"bot-speak-buttons-div\">\n            <button mat-raised-button class=\"bot-speak-button\" color=\"accent\" (click)=\"sendText()\">\n              <mat-icon>keyboard</mat-icon>\n              Envoyer en CHAT\n            </button>\n\n            <button mat-raised-button class=\"bot-speak-button\" color=\"accent\" (click)=\"sendVoice()\">\n              <mat-icon>keyboard_voice</mat-icon>\n              Envoyer en VOIX\n            </button>\n          </div>\n \n        </mat-card>\n\n        <mat-card class=\"bot-screenshot-card\">\n          <div class=\"bot-screenshot-div\">\n \n            <button mat-raised-button class=\"bot-screenshot-button\" color=\"accent\" (click)=\"screenshot()\">\n              Actualiser la vision <mat-icon>add_a_photo</mat-icon>\n            </button>\n            <span>Cliquez sur l'image pour contrôler la page</span>\n            <img mat-card-image *ngIf=\"screenshotUrl\" id=\"bot-screenshot-img\" [src]=\"screenshotUrl\" alt=\"Screenshot of the bot\" (click)=\"clickPage($event)\">  \n\n            <div *ngIf=\"!screenshotUrl\">\n              <mat-spinner></mat-spinner>\n            </div>\n          </div>\n     \n        </mat-card>\n      </mat-card-content>\n    </mat-card>\n\n    <div *ngIf=\"loading\">\n      <mat-spinner></mat-spinner>\n      Connexion en cours\n    </div>\n</div>\n","<div id=\"mic-dialog-div\">\n    <h1 mat-dialog-title>Veuillez selectionner le périphérique audio correspondant à votre serveur audio virtuel</h1>\n    <mat-list role=\"list\">\n        <mat-list-item class=\"mic-dialog-list-item\" role=\"listitem\" *ngFor=\"let device of data\">\n            <button mat-stroked-button color=\"accent\" (click)=\"onNoClick(device.index)\" matDialogClose>{{device.value}}</button>\n        </mat-list-item>\n    </mat-list>\n    <button class=\"mic-dialog-cancel-button\" mat-raised-button color=\"accent\" (click)=\"onNoClick(null)\">OK</button>\n    <button class=\"mic-dialog-cancel-button\" mat-raised-button color=\"accent\" (click)=\"onNoClick('no')\">Sans micro</button>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>register works!</p>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from 'src/app/services/http.service';\nimport { Observable } from 'rxjs';\nimport { Sound } from 'src/app/models/Sound';\nimport { ToastService } from 'src/app/services/toast.service';\n\n@Component({\n  selector: 'app-soundboard',\n  templateUrl: './soundboard.component.html',\n  styleUrls: ['./soundboard.component.scss']\n})\nexport class SoundboardComponent implements OnInit {\n\n  sounds: Sound[];\n  cols = 0;\n\n  constructor(\n    private httpService: HttpService,\n    private toastService: ToastService\n  ) { }\n\n  ngOnInit(): void {\n    this.httpService.get('sounds').toPromise().then(sounds => {\n      this.sounds = sounds;\n      this.cols = Math.round(Math.sqrt(this.sounds.length));\n    });\n  }\n\n  async playSound(name) {\n    const res = await this.httpService.post('sound', {name}).toPromise();\n\n    if (!res) {\n      this.toastService.showToast('Aucun BOT connecté pour le moment...', 5000)\n    }\n  }\n\n}\n","<div id=\"sounds-grid-div\">\n    <mat-grid-list id=\"sounds-grid-list\" [cols]=\"cols\" rowHeight=\"3:1\">\n        <mat-grid-tile *ngFor=\"let sound of sounds\">\n\n            <button mat-raised-button color=\"primary\" class=\"sound-card-button\" (click)=\"playSound(sound.name)\">\n                <span class=\"sound-card-span\">\n                    <mat-icon>music_note</mat-icon>{{sound.name}}\n                </span>\n            </button>\n\n        </mat-grid-tile>\n    </mat-grid-list>\n</div>\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  apiUrl = `${environment.apiUrl}/api/`;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  get(tag): Observable<any> {\n    return this.http.get(this.apiUrl + tag);\n  }\n\n  post(tag, postParams): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post<any>(this.apiUrl + tag, JSON.stringify(postParams), httpOptions);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as io from 'socket.io-client';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SocketService {\n\n  apiUrl = environment.apiUrl;\n  socket: any;\n  alive = true;\n\n  constructor() { }\n\n  setup() {\n    this.socket = io(this.apiUrl);\n    this.alive = true;\n    this.socket.on('connect_error', () => {\n      this.alive = false;\n    });\n\n    this.socket.on('reconnect', () => {\n      this.alive = true;\n    });\n\n    this.socket.on('connect', () => {\n      this.alive = true;\n    });\n  }\n\n  emit(tag, params) {\n    this.socket.emit(tag, params);\n  }\n\n  subscribe(tag) {\n    return new Observable((observer) => {\n      this.socket.on(tag, (info) => {\n        observer.next(info);\n      });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastService {\n\n  constructor(\n    private snackBar: MatSnackBar\n  ) { }\n\n  showToast(message: string, duration: number) {\n    this.snackBar.open(message, null, {\n      duration\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: ''\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"],"sourceRoot":"webpack:///"}