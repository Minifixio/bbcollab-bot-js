{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/commands-list/commands-list.component.ts","webpack:///src/app/components/commands-list/commands-list.component.html","webpack:///src/app/components/menu/menu.component.ts","webpack:///src/app/components/menu/menu.component.html","webpack:///src/app/pages/drawings/drawings.component.html","webpack:///src/app/pages/drawings/drawings.component.ts","webpack:///src/app/pages/login/login.component.ts","webpack:///src/app/pages/login/login.component.html","webpack:///src/app/pages/main/main.component.html","webpack:///src/app/pages/main/dialog-mic-selection.html","webpack:///src/app/pages/main/main.component.ts","webpack:///src/app/pages/register/register.component.ts","webpack:///src/app/pages/register/register.component.html","webpack:///src/app/pages/soundboard/soundboard.component.html","webpack:///src/app/pages/soundboard/soundboard.component.ts","webpack:///src/app/services/http.service.ts","webpack:///src/app/services/socket.service.ts","webpack:///src/app/services/toast.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///ws (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","entryComponents","providers","bootstrap","CommandsListComponent","httpService","get","toPromise","commands","forEach","cmd","activated","filter","command","MenuComponent","socketService","opened","DrawingsComponent","toastService","cols","drawings","Math","round","sqrt","length","name","post","drawingRes","showToast","apiUrl","LoginComponent","MainComponent","dialog","loading","connected","setup","bot","currentBot","screenshot","botStatusSocket","subscribe","info","socketCases","botNameInput","botUrlInput","includes","url","selectedCommands","started","res","console","log","message","botTextarea","username","timeStamp","Date","getTime","screenshotUrl","event","boundingBox","document","getElementById","getBoundingClientRect","xPos","x","yPos","y","xRatio","width","yRatio","height","key","startBot","connectionMessage","openMicDialog","content","audioDevices","dialogRef","open","DialogMicSelection","data","afterClosed","result","index","closeAll","close","onNoClick","RegisterComponent","SoundboardComponent","sounds","HttpService","http","tag","postParams","httpOptions","headers","JSON","stringify","providedIn","SocketService","alive","socket","on","params","emit","observer","next","ToastService","snackBar","duration","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MainComponent } from 'src/app/pages/main/main.component';\nimport { SoundboardComponent } from './pages/soundboard/soundboard.component';\nimport { DrawingsComponent } from './pages/drawings/drawings.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { RegisterComponent } from './pages/register/register.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full'},\n  { path: 'dashboard', component: MainComponent},\n  { path: 'soundboard', component: SoundboardComponent},\n  { path: 'drawings', component: DrawingsComponent},\n  { path: 'login', component: LoginComponent},\n  { path: 'register', component: RegisterComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'dashboard';\n}\n","<app-menu></app-menu>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MenuComponent } from './components/menu/menu.component';\nimport { MainComponent, DialogMicSelection } from './pages/main/main.component';\nimport { FormsModule } from '@angular/forms';\n\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatListModule} from '@angular/material/list';\nimport { SoundboardComponent } from './pages/soundboard/soundboard.component';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatInputModule} from '@angular/material/input';\nimport { CommandsListComponent } from './components/commands-list/commands-list.component';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatDividerModule} from '@angular/material/divider';\nimport { DrawingsComponent } from './pages/drawings/drawings.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { RegisterComponent } from './pages/register/register.component';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatDialogModule} from '@angular/material/dialog';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MenuComponent,\n    MainComponent,\n    SoundboardComponent,\n    CommandsListComponent,\n    DrawingsComponent,\n    LoginComponent,\n    RegisterComponent,\n    DialogMicSelection\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    FormsModule,\n\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatToolbarModule,\n    MatListModule,\n    MatCardModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatGridListModule,\n    MatDividerModule,\n    MatProgressSpinnerModule,\n    MatSnackBarModule,\n    MatDialogModule\n  ],\n  entryComponents: [\n    DialogMicSelection,\n    MainComponent\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from 'src/app/services/http.service';\nimport { Command } from 'src/app/models/Command';\n\n@Component({\n  selector: 'app-commands-list',\n  templateUrl: './commands-list.component.html',\n  styleUrls: ['./commands-list.component.scss']\n})\nexport class CommandsListComponent implements OnInit {\n\n  commands: Command[];\n\n  constructor(\n    private httpService: HttpService\n  ) { }\n\n  ngOnInit(): void {\n    this.httpService.get('commands').toPromise().then(commands => {\n      commands.forEach(cmd => cmd.activated = true);\n      this.commands = commands;\n    });\n  }\n\n  selectedCommands() {\n    return this.commands.filter(command => command.activated === true);\n  }\n\n}\n","<mat-selection-list>\n    <mat-list-option checkboxPosition=\"before\" *ngFor=\"let command of commands\" [selected]=\"command.activated\" (click)=\"command.activated = !command.activated\">\n            <span><label class=\"command-checkbox-label\">!{{command.name}}</label> : {{command.description}}</span>\n    </mat-list-option>\n</mat-selection-list>","import { Component, OnInit } from '@angular/core';\nimport { SocketService } from 'src/app/services/socket.service';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.scss']\n})\nexport class MenuComponent implements OnInit {\n\n  opened = true;\n\n  constructor(\n    public socketService: SocketService\n  ) { }\n\n  ngOnInit(): void {\n\n  }\n\n}\n","\n<mat-toolbar color=\"primary\">\n  <button mat-icon-button (click)=\"opened = !opened\">\n    <mat-icon>menu</mat-icon>\n    </button> BOT Blackboard Collab\n</mat-toolbar>\n\n<mat-sidenav-container  class=\"main-container\" autosize>\n  <mat-sidenav class=\"main-sidenav\" [opened]=\"opened\" fixedInViewport=\"false\" mode=\"side\">\n              <mat-list role=\"list\">\n\n                <mat-list-item role=\"listitem\">\n                  <button routerLink=\"/dashboard\" class=\"sidenav-button\" mat-button>\n                    Page de contrôle\n                  </button> \n                </mat-list-item>\n\n                <mat-list-item role=\"listitem\"> \n                  <button routerLink=\"/soundboard\" class=\"sidenav-button\" mat-button>\n                    Soundboard\n                  </button> \n                </mat-list-item>\n\n                <mat-list-item role=\"listitem\">\n                  <button routerLink=\"/drawings\" class=\"sidenav-button\" mat-button>\n                    Dessins\n                  </button> \n                </mat-list-item>\n\n                <!--<mat-list-item role=\"listitem\">\n                  <button class=\"sidenav-button\" mat-button>\n                    Services\n                  </button> \n                </mat-list-item>-->\n\n              </mat-list>\n  </mat-sidenav>\n  <mat-sidenav-content>\n    <router-outlet *ngIf=\"socketService.alive\"></router-outlet>\n\n    <div *ngIf=\"!socketService.alive\" id=\"error-socket-div\">\n      <div>ERREUR DE CONNEXION AU SERVEUR</div>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n","<div id=\"drawings-grid-div\">\n    <mat-grid-list id=\"drawings-grid-list\" [cols]=\"cols\" rowHeight=\"3:1\">\n        <mat-grid-tile *ngFor=\"let drawing of drawings\">\n\n            <button mat-raised-button color=\"accent\" class=\"drawing-card-button\" (click)=\"draw(drawing.name)\">\n                <span class=\"drawing-card-spann\">\n                    {{drawing.name}}\n                </span>\n                <img mat-card-image class=\"drawing-svg\" [src]=\"getUrl(drawing.name)\" alt=\"Screenshot of the bot\">  \n            </button>\n\n\n        </mat-grid-tile>\n    </mat-grid-list>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Drawing } from 'src/app/models/Drawing';\nimport { HttpService } from 'src/app/services/http.service';\nimport { ToastService } from 'src/app/services/toast.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-drawings',\n  templateUrl: './drawings.component.html',\n  styleUrls: ['./drawings.component.scss']\n})\nexport class DrawingsComponent implements OnInit {\n\n  drawings: Drawing[];\n  cols = 0;\n\n  constructor(\n    private httpService: HttpService,\n    private toastService: ToastService\n  ) { }\n\n  ngOnInit(): void {\n    this.httpService.get('drawings').toPromise().then(drawings => {\n      this.drawings = drawings;\n      this.cols = Math.round(Math.sqrt(this.drawings.length));\n    });\n  }\n\n  async draw(name) {\n    const drawingRes = await this.httpService.post('draw', {name}).toPromise();\n\n    if (!drawingRes) {\n      this.toastService.showToast('Erreur, le BOT ne peut pas dessiner. Le dessin n\\'est pas activé sur la page', 6000);\n    }\n  }\n\n  getUrl(name) {\n    return environment.apiUrl + `/static/drawings/svg/${name}.svg`;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>login works!</p>\n","\n<div id=\"main-div\">\n    <mat-card class=\"start-bot-card\" *ngIf=\"!currentBot && !loading\">\n        <mat-card-header>\n          <mat-card-title>Lancer un nouveau BOT</mat-card-title>\n        </mat-card-header>\n\n        <mat-card-content>\n            <form>\n                <mat-form-field>\n                  <mat-label>Nom du BOT</mat-label>\n                  <input matInput (keydown)=\"onKeydown($event)\" [(ngModel)]=\"botNameInput\" [ngModelOptions]=\"{standalone: true}\" placeholder=\"Joe\">\n                </mat-form-field>\n            </form>\n\n            <form>\n              <mat-form-field>\n                <mat-label>URL de la classe</mat-label>\n                <input matInput (keydown)=\"onKeydown($event)\" [(ngModel)]=\"botUrlInput\" [ngModelOptions]=\"{standalone: true}\" placeholder=\"https://eu.bbcollab.com/guest/...\">\n              </mat-form-field>\n            </form>\n\n            <app-commands-list #commands></app-commands-list>\n\n        </mat-card-content>\n\n        <mat-divider></mat-divider>\n\n        <button id=\"start-button\" (click)=\"startBot()\" mat-raised-button color=\"primary\">Lancer !</button>\n\n    </mat-card>\n\n    <mat-card *ngIf=\"currentBot && !loading\" class=\"statut-bot-card\">\n      <mat-card-header>\n        <button id=\"disconnect-button\" (click)=\"disconnectBot()\" mat-raised-button color=\"primary\">\n         <mat-icon>input</mat-icon> Déconnecter\n        </button>\n        <mat-card-title>\n          <div class=\"statut-title-div\">\n            Status du BOT <span>{{currentBot.name}}</span>\n          </div>\n\n        </mat-card-title>\n      </mat-card-header>\n\n      <mat-card-content>\n        <mat-card class=\"statut-connection-card\">\n          <div class=\"statut-url-div\">\n            <span>{{currentBot.url}}</span>\n          </div>\n          <div *ngIf=\"!connected\" class=\"statut-div\">\n            <mat-spinner diameter=\"20\"></mat-spinner>\n            {{connectionMessage}}\n            <mat-icon class=\"not-connected-icon\">signal_wifi_off</mat-icon>\n          </div>\n          \n          <div *ngIf=\"connected\" class=\"statut-div\">\n            Connecté\n            <mat-icon class=\"connected-icon\">signal_wifi_4_bar</mat-icon>\n          </div>\n        </mat-card>\n      \n        <mat-card class=\"bot-speak-card\">        \n          <mat-form-field class=\"bot-speak-formfield\">\n            <mat-label>Faire parler le BOT</mat-label>\n            <textarea matInput [(ngModel)]=\"botTextarea\" class=\"bot-speak-textarea\" placeholder=\"Ex. Je vais détruire le monde...\"></textarea>\n          </mat-form-field>\n\n          <div class=\"bot-speak-buttons-div\">\n            <button mat-raised-button class=\"bot-speak-button\" color=\"accent\" (click)=\"sendText()\">\n              <mat-icon>keyboard</mat-icon>\n              Envoyer en CHAT\n            </button>\n\n            <button mat-raised-button class=\"bot-speak-button\" color=\"accent\" (click)=\"sendVoice()\">\n              <mat-icon>keyboard_voice</mat-icon>\n              Envoyer en VOIX\n            </button>\n          </div>\n \n        </mat-card>\n\n        <mat-card class=\"bot-screenshot-card\">\n          <div class=\"bot-screenshot-div\">\n \n            <button mat-raised-button class=\"bot-screenshot-button\" color=\"accent\" (click)=\"screenshot()\">\n              Actualiser la vision <mat-icon>add_a_photo</mat-icon>\n            </button>\n            <span>Cliquez sur l'image pour contrôler la page</span>\n            <img mat-card-image *ngIf=\"screenshotUrl\" id=\"bot-screenshot-img\" [src]=\"screenshotUrl\" alt=\"Screenshot of the bot\" (click)=\"clickPage($event)\">  \n\n            <div *ngIf=\"!screenshotUrl\">\n              <mat-spinner></mat-spinner>\n            </div>\n          </div>\n     \n        </mat-card>\n      </mat-card-content>\n    </mat-card>\n\n    <div *ngIf=\"loading\">\n      <mat-spinner></mat-spinner>\n      Connexion en cours\n    </div>\n</div>\n","<div id=\"mic-dialog-div\">\n    <h1 mat-dialog-title>Veuillez selectionner le périphérique audio correspondant à votre serveur audio virtuel</h1>\n    <mat-list role=\"list\">\n        <mat-list-item class=\"mic-dialog-list-item\" role=\"listitem\" *ngFor=\"let device of data\">\n            <button mat-stroked-button color=\"accent\" (click)=\"onNoClick(device.index)\" matDialogClose>{{device.value}}</button>\n        </mat-list-item>\n    </mat-list>\n    <button class=\"mic-dialog-cancel-button\" mat-raised-button color=\"accent\" (click)=\"onNoClick(null)\">OK</button>\n    <button class=\"mic-dialog-cancel-button\" mat-raised-button color=\"accent\" (click)=\"onNoClick('no')\">Sans micro</button>\n</div>\n\n","import { Component, OnInit, ViewChild, Inject } from '@angular/core';\nimport { CommandsListComponent } from 'src/app/components/commands-list/commands-list.component';\nimport { HttpService } from 'src/app/services/http.service';\nimport { SocketService } from 'src/app/services/socket.service';\nimport { Observable } from 'rxjs';\nimport { Bot } from 'src/app/models/Bot';\nimport { ToastService } from 'src/app/services/toast.service';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class MainComponent implements OnInit {\n\n  @ViewChild('commands')\n  commands: CommandsListComponent;\n\n  botStatusSocket: Observable<any>;\n  currentBot: Bot;\n\n  loading = false;\n  connected = false;\n  connectionMessage: string;\n\n  botTextarea: string;\n  screenshotUrl: string;\n\n  botNameInput: string;\n  botUrlInput: string;\n\n  constructor(\n    private httpService: HttpService,\n    private socketService: SocketService,\n    private toastService: ToastService,\n    public dialog: MatDialog\n  ) { }\n\n  ngOnInit(): void {\n    this.socketService.setup();\n\n    this.httpService.get('bot').toPromise().then(bot => {\n      if (bot) {\n        this.currentBot = bot;\n        this.connected = this.currentBot.connected;\n        this.screenshot();\n      }\n    });\n\n    if (!this.botStatusSocket) {\n      this.botStatusSocket = this.socketService.subscribe('bot-status');\n      this.botStatusSocket.subscribe(info => {\n        this.socketCases(info);\n      });\n    }\n  }\n\n  async startBot() {\n\n    if (!this.botNameInput || !(this.botUrlInput.includes('bbcollab.com') || this.botUrlInput.includes('blackboard'))) {\n      this.toastService.showToast('Veuillez remplir les champs correctement avant!', 5000);\n    } else {\n\n      this.currentBot = {\n        name: this.botNameInput,\n        url: this.botUrlInput,\n        commands: this.commands.selectedCommands(),\n        connected: true\n      };\n\n      this.loading = true;\n      const started = await this.httpService.post('start', this.currentBot).toPromise();\n\n      if (!started) {\n        this.loading = false;\n        this.currentBot = null;\n        this.toastService.showToast('Erreur lors de la connexion avec le BOT', 6000);\n      }\n    }\n  }\n\n  async disconnectBot() {\n    await this.httpService.get('disconnect').toPromise().then(res => console.log(res));\n    this.currentBot = null;\n  }\n\n  async sendText() {\n    const res = await this.httpService.post('text', {\n      message: this.botTextarea\n    }).toPromise();\n\n    if (res) {\n      this.toastService.showToast('Le message a bien été envoyé !', 5000);\n    } else {\n      this.toastService.showToast('Le BOT ne peut pas accéder au chat', 6000);\n    }\n  }\n\n  async sendVoice() {\n    const res = await this.httpService.post('speak', {\n      message: this.botTextarea,\n      username: this.currentBot.name\n    }).toPromise();\n\n    if (res) {\n      this.toastService.showToast('Le message a bien été envoyé !', 5000);\n    }\n  }\n\n  async screenshot() {\n    const url = environment.apiUrl + '/static/screenshot/screenshot.png';\n    const timeStamp = new Date().getTime();\n    await this.httpService.get('screenshot').toPromise();\n    this.screenshotUrl = url + '?' + timeStamp;\n  }\n\n  async clickPage(event) {\n    const boundingBox = document.getElementById('bot-screenshot-img').getBoundingClientRect();\n    const xPos = event.x - boundingBox.x;\n    const yPos = event.y - boundingBox.y;\n    const xRatio = xPos / boundingBox.width;\n    const yRatio = (yPos / boundingBox.height) * 0.55;\n    console.log('click');\n    await this.httpService.post('click', {x: xRatio, y: yRatio}).toPromise();\n    this.screenshot();\n  }\n\n  onKeydown(event) {\n    if (event.key === 'Enter') {\n      this.startBot();\n    }\n  }\n\n  socketCases(info) {\n    switch (info.message) {\n      case 'connecting':\n        this.loading = false;\n        this.connected = false;\n        this.screenshot();\n        this.connectionMessage = 'Connexion en cours';\n        break;\n\n      case 'live':\n        this.loading = false;\n        this.connected = true;\n        break;\n\n      case 'wrong-url':\n        this.currentBot = null;\n        this.toastService.showToast('L\\'URL n\\'est pas bonne !', 6000);\n        break;\n\n      case 'error':\n        break;\n\n      case 'skipping-test':\n        this.loading = false;\n        this.connected = false;\n        this.screenshot();\n        this.connectionMessage = 'Le bot passe la page de test';\n        break;\n\n      case 'bot-infos':\n        this.currentBot = info;\n        this.screenshot();\n        break;\n\n      case 'setup-mic':\n        this.loading = false;\n        this.connected = false;\n        this.screenshot();\n        this.connectionMessage = 'Le bot accède au micro';\n        break;\n\n      case 'setup-mic-error':\n        this.screenshot();\n        this.openMicDialog(info.content);\n        break;\n\n      case 'mic-selection':\n        this.connectionMessage = 'Le bot doit choisir une source micro';\n        this.screenshot();\n        break;\n\n      case 'video-setup-done':\n        this.connectionMessage = 'Le bot passe l\\'accès à la caméra';\n        this.screenshot();\n        break;\n\n      case 'mic-selection-done':\n        this.connectionMessage = 'Le bot a choisi la source micro';\n        this.screenshot();\n        break;\n\n      case 'chat-not-available':\n        this.toastService.showToast('Le BOT ne peut pas accéder au chat', 6000);\n        this.screenshot();\n        break;\n\n      case 'setup-mic-done':\n        this.loading = false;\n        this.connected = false;\n        this.screenshot();\n        this.connectionMessage = 'Micro mis en place';\n        break;\n    }\n  }\n\n  async openMicDialog(audioDevices) {\n    const dialogRef = this.dialog.open(DialogMicSelection, {\n      width: 'fit-content',\n      data: audioDevices\n    });\n\n    dialogRef.afterClosed().subscribe(async (result) => {\n      console.log('selected index', result);\n\n      if (result != null) {\n        this.httpService.post('mic-option', {index: result}).toPromise().then(res => console.log(res));\n        this.dialog.closeAll();\n      }\n\n    });\n  }\n}\n\n\n@Component({\n  selector: 'dialog-mic-selection',\n  templateUrl: 'dialog-mic-selection.html',\n  styleUrls: ['./main.component.scss']\n})\nexport class DialogMicSelection {\n\n  constructor(\n    public dialogRef: MatDialogRef<DialogMicSelection>,\n    @Inject(MAT_DIALOG_DATA) public data) {}\n\n  onNoClick(res): void {\n    this.dialogRef.close(res);\n  }\n}","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>register works!</p>\n","<div id=\"sounds-grid-div\">\n    <mat-grid-list id=\"sounds-grid-list\" [cols]=\"cols\" rowHeight=\"3:1\">\n        <mat-grid-tile *ngFor=\"let sound of sounds\">\n\n            <button mat-raised-button color=\"primary\" class=\"sound-card-button\" (click)=\"playSound(sound.name)\">\n                <span class=\"sound-card-span\">\n                    <mat-icon>music_note</mat-icon>{{sound.name}}\n                </span>\n            </button>\n\n        </mat-grid-tile>\n    </mat-grid-list>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpService } from 'src/app/services/http.service';\nimport { Observable } from 'rxjs';\nimport { Sound } from 'src/app/models/Sound';\nimport { ToastService } from 'src/app/services/toast.service';\n\n@Component({\n  selector: 'app-soundboard',\n  templateUrl: './soundboard.component.html',\n  styleUrls: ['./soundboard.component.scss']\n})\nexport class SoundboardComponent implements OnInit {\n\n  sounds: Sound[];\n  cols = 0;\n\n  constructor(\n    private httpService: HttpService,\n    private toastService: ToastService\n  ) { }\n\n  ngOnInit(): void {\n    this.httpService.get('sounds').toPromise().then(sounds => {\n      this.sounds = sounds;\n      this.cols = Math.round(Math.sqrt(this.sounds.length));\n    });\n  }\n\n  async playSound(name) {\n    const res = await this.httpService.post('sound', {name}).toPromise();\n\n    if (!res) {\n      this.toastService.showToast('Aucun BOT connecté pour le moment...', 5000)\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  apiUrl = `${environment.apiUrl}/api/`;\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n  get(tag): Observable<any> {\n    return this.http.get(this.apiUrl + tag);\n  }\n\n  post(tag, postParams): Observable<any> {\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Access-Control-Allow-Origin': '*',\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post<any>(this.apiUrl + tag, JSON.stringify(postParams), httpOptions);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as io from 'socket.io-client';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SocketService {\n\n  apiUrl = environment.apiUrl;\n  socket: any;\n  alive = true;\n\n  constructor() { }\n\n  setup() {\n    this.socket = io(this.apiUrl);\n    this.alive = true;\n    this.socket.on('connect_error', () => {\n      this.alive = false;\n    });\n\n    this.socket.on('reconnect', () => {\n      this.alive = true;\n    });\n\n    this.socket.on('connect', () => {\n      this.alive = true;\n    });\n  }\n\n  emit(tag, params) {\n    this.socket.emit(tag, params);\n  }\n\n  subscribe(tag) {\n    return new Observable((observer) => {\n      this.socket.on(tag, (info) => {\n        observer.next(info);\n      });\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ToastService {\n\n  constructor(\n    private snackBar: MatSnackBar\n  ) { }\n\n  showToast(message: string, duration: number) {\n    this.snackBar.open(message, null, {\n      duration\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: ''\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"]}